# Results by subject: mfARI (English format)
#
cat(
indent,
"-- CSV file with mfARI stats by subject (English)\n",
sep = ""
)
tgt.basename <- paste("subjects", "mfARI", tgt.suffix, sep = "-")
tgt.csv.name <- paste(tgt.basename, tgt.ext, sep = ".")
tgt.csv.filename <- file.path(tgt.dir, tgt.csv.name)
# If the target CSV file exists and it should not be overwritten
if(all(file.exists(tgt.csv.filename), !overwrite))
cat(
next.indent,
"-- Target CSV file already exist and not overwritten\n",
sep = ""
)
else
{
write.csv(
x = subject.mfari.stats,
file = tgt.csv.filename,
row.names = FALSE
)
cat(next.indent, " CSV file created.\n", sep = "")
}
#
# Results by subject: dARI (Spanish format)
#
cat(
indent,
"-- CSV file with dARI stats by subject (Spanish)\n",
sep = ""
)
tgt.basename <- paste("sujetos", "dARI", tgt.suffix, sep = "-")
tgt.csv.name <- paste(tgt.basename, tgt.ext, sep = ".")
tgt.csv.filename <- file.path(tgt.dir, tgt.csv.name)
# If the target CSV file exists and it should not be overwritten
if(all(file.exists(tgt.csv.filename), !overwrite))
cat(
next.indent,
"-- Target CSV file already exist and not overwritten\n",
sep = ""
)
else
{
english <- c("Subject", "Side")
spanish <- c("Sujeto", "Hemisferio")
col.names <- mapply(
FUN = gsub,
english,
spanish,
colnames(subject.dari.stats)
)
subject.dari.stats.es <- subject.dari.stats
colnames(subject.dari.stats.es) <- col.names
write.csv2(
x = subject.dari.stats.es,
file = tgt.csv.filename,
row.names = FALSE
)
cat(next.indent, " CSV file created.\n", sep = "")
}
stats.by.mvre
}
run()
run <- function(
src.dir = file.path(WORK.DIR, "Data"),
src.ext = "txt",
header = TRUE,
tgt.suffix = paste("stats", VERSION, sep = "-"),
tgt.dir = file.path(WORK.DIR, "stats"),
tgt.ext = "csv",
overwrite = TRUE,
subjects = c("AC","AP","AV","CC","CS","DM","DS","GP","HF","HS","IH","MM","MR","MV","ND","PC","RO", "VT"),
manoeuvres = c("ACOSTADO", "PIE", "SENTADO"),
time.col.name = "Time",
abp.col.name = "ABP",
left.cbfv.col.name = "LCBFV",
right.cbfv.col.name = "RCBFV",
left.plot.suffix = "Izq",
right.plot.suffix = "Der",
sampling.time = 0.4,
time.release = 0,#5 segundos antes de la caida
baseline.initial.time = -10.0,#5 segundos antes de la caida
baseline.final.time = time.release,
min.ABP.max.delta.time = 20 * 0.8,#a partir de time.release busca el minimo
min.CBFV.max.delta.time = 20 * 0.8,#a partir de time.release busca el minimo
stabilisation.time = 20,#cuanto dura la seÃ±al para que se recupere nuevamente
referential.time.instant = time.release,
delta.time.before.ref = 0,
delta.time.after.ref = round(floor(20 * 0.8 / sampling.time) * sampling.time, 1),
comparison.function = get.MSE,
fitting.value.name = "MSE",
fitting.value.rounding.digits = 4,
at.param.rounding.digits = 6,
time.tol = sampling.time / 100,
indent = ""
)
{
# Makes sure the target directory exists
dir.create(
path = tgt.dir,
showWarnings = FALSE,
recursive = TRUE,
mode = "0711"
)
next.indent <- paste0(indent, "  ")
#
# Results by manoeuvre (English format)
#
cat(
indent,
"-- CSV file with stats by manoeuvre (English)\n",
sep = ""
)
tgt.basename <- paste("manoeuvres", tgt.suffix, sep = "-")
tgt.csv.name <- paste(tgt.basename, tgt.ext, sep = ".")
tgt.csv.filename <- file.path(tgt.dir, tgt.csv.name)
# If the target CSV file exists and it should not be overwritten
if(all(file.exists(tgt.csv.filename), !overwrite))
{
cat(
next.indent,
"-- Target CSV file already exist and not overwritten...\n",
next.indent,
"   Using these data for any other missing file.\n",
sep = ""
)
stats.by.mvre <- read.csv(tgt.csv.filename)
}
else
{
stats.by.mvre <- get.stats.by.mvre(
src.dir = src.dir,
src.ext = src.ext,
header = header,
subjects = subjects,
manoeuvres = manoeuvres,
time.col.name = time.col.name,
abp.col.name = abp.col.name,
left.cbfv.col.name = left.cbfv.col.name,
right.cbfv.col.name = right.cbfv.col.name,
left.plot.suffix = left.plot.suffix,
right.plot.suffix = right.plot.suffix,
sampling.time = sampling.time,
time.release = time.release,
baseline.initial.time = baseline.initial.time,
baseline.final.time = baseline.final.time,
min.ABP.max.delta.time = min.ABP.max.delta.time,
min.CBFV.max.delta.time = min.CBFV.max.delta.time,
stabilisation.time = stabilisation.time,
referential.time.instant = referential.time.instant,
delta.time.before.ref = delta.time.before.ref,
delta.time.after.ref = delta.time.after.ref,
comparison.function = comparison.function,
fitting.value.name = fitting.value.name,
fitting.value.rounding.digits = fitting.value.rounding.digits,
at.param.rounding.digits = at.param.rounding.digits,
time.tol = time.tol,
indent = next.indent
)
write.csv(stats.by.mvre, file = tgt.csv.filename, row.names = FALSE)
cat(next.indent, " CSV file created.\n", sep = "")
}
#
# Results by manoeuvre (Spanish format)
#
cat(
indent,
"-- CSV file with stats by manoeuvre (Spanish)\n",
sep = ""
)
tgt.basename <- paste("maniobras", tgt.suffix, sep = "-")
tgt.csv.name <- paste(tgt.basename, tgt.ext, sep = ".")
tgt.csv.filename <- file.path(tgt.dir, tgt.csv.name)
# If the target CSV file exists and it should not be overwritten
if(all(file.exists(tgt.csv.filename), !overwrite))
cat(
next.indent,
"-- Target CSV file already exist and not overwritten\n",
sep = ""
)
else
{
english <- c("Subject", "Manoeuvre", "Side")
spanish <- c("Sujeto", "Maniobra", "Hemisferio")
col.names <- mapply(gsub, english, spanish, colnames(stats.by.mvre))
stats.by.mvre.es <- stats.by.mvre
colnames(stats.by.mvre.es) <- col.names
write.csv2(
x = stats.by.mvre.es,
file = tgt.csv.filename,
row.names = FALSE
)
cat(next.indent, " CSV file created.\n", sep = "")
}
#
# Gets stats by subject
#
cat(indent, "-- Getting dARI stats by subject\n", sep = "")
subject.dari.stats <- get.stats.by.subject(stats.by.mvre, "dARI")
cat(indent, "-- Getting mfARI stats by subject\n", sep = "")
subject.mfari.stats <- get.stats.by.subject(stats.by.mvre, "mfARI")
#
# Results by subject: dARI (English format)
#
cat(
indent,
"-- CSV file with dARI stats by subject (English)\n",
sep = ""
)
tgt.basename <- paste("subjects", "dARI", tgt.suffix, sep = "-")
tgt.csv.name <- paste(tgt.basename, tgt.ext, sep = ".")
tgt.csv.filename <- file.path(tgt.dir, tgt.csv.name)
# If the target CSV file exists and it should not be overwritten
if(all(file.exists(tgt.csv.filename), !overwrite))
cat(
next.indent,
"-- Target CSV file already exist and not overwritten\n",
sep = ""
)
else
{
write.csv(
x = subject.dari.stats,
file = tgt.csv.filename,
row.names = FALSE
)
cat(next.indent, " CSV file created.\n", sep = "")
}
#
# Results by subject: mfARI (English format)
#
cat(
indent,
"-- CSV file with mfARI stats by subject (English)\n",
sep = ""
)
tgt.basename <- paste("subjects", "mfARI", tgt.suffix, sep = "-")
tgt.csv.name <- paste(tgt.basename, tgt.ext, sep = ".")
tgt.csv.filename <- file.path(tgt.dir, tgt.csv.name)
# If the target CSV file exists and it should not be overwritten
if(all(file.exists(tgt.csv.filename), !overwrite))
cat(
next.indent,
"-- Target CSV file already exist and not overwritten\n",
sep = ""
)
else
{
write.csv(
x = subject.mfari.stats,
file = tgt.csv.filename,
row.names = FALSE
)
cat(next.indent, " CSV file created.\n", sep = "")
}
#
# Results by subject: dARI (Spanish format)
#
cat(
indent,
"-- CSV file with dARI stats by subject (Spanish)\n",
sep = ""
)
tgt.basename <- paste("sujetos", "dARI", tgt.suffix, sep = "-")
tgt.csv.name <- paste(tgt.basename, tgt.ext, sep = ".")
tgt.csv.filename <- file.path(tgt.dir, tgt.csv.name)
# If the target CSV file exists and it should not be overwritten
if(all(file.exists(tgt.csv.filename), !overwrite))
cat(
next.indent,
"-- Target CSV file already exist and not overwritten\n",
sep = ""
)
else
{
english <- c("Subject", "Side")
spanish <- c("Sujeto", "Hemisferio")
col.names <- mapply(
FUN = gsub,
english,
spanish,
colnames(subject.dari.stats)
)
subject.dari.stats.es <- subject.dari.stats
colnames(subject.dari.stats.es) <- col.names
write.csv2(
x = subject.dari.stats.es,
file = tgt.csv.filename,
row.names = FALSE
)
cat(next.indent, " CSV file created.\n", sep = "")
}
stats.by.mvre
}
run()
run()
setwd("C:/Users/Luis/Documents/DataScience/Tesis/Calculo ARI/v15.9.10/stats")
data <- read.csv('maniobras-stats-v15.9.10.csv', sep=';')
left <- data[data$Hemisferio=="Left",]$mfARI
right <- data[data$Hemisferio=="Right",]$mfARI
shapiro.test(left)#normal
shapiro.test(right)#normal
t.test(left, right, alternative = "two.sided") #Los hemisferios son similares
mfARI <- rowMeans(data.frame(left, right))
dat = data.frame("Maniobra" = data[data$Hemisferio=="Left",]$Maniobra, "mfARI" = mfARI)
fm = aov( dat$mfARI ~ dat$Maniobra, data = dat )
summary(fm)
TukeyHSD(fm)
setwd("C:/Users/Luis/Documents/DataScience/Tesis/Calculo ARI/v15.9.10/stats")
data <- read.csv('maniobras-stats-v15.9.10.csv', sep=';')
left <- data[data$Hemisferio=="Left",]$mfARI
right <- data[data$Hemisferio=="Right",]$mfARI
shapiro.test(left)#normal
shapiro.test(right)#normal
t.test(left, right, alternative = "two.sided") #Los hemisferios son similares
mfARI <- rowMeans(data.frame(left, right))
dat = data.frame("Maniobra" = data[data$Hemisferio=="Left",]$Maniobra, "mfARI" = mfARI)
fm = aov( dat$mfARI ~ dat$Maniobra, data = dat )
summary(fm)
TukeyHSD(fm)
dat
fm = aov( dat$Maniobra ~ dat$mfARI, data = dat )
summary(fm)
aov( dat$mfARI ~ dat$Maniobra, data = dat )
fm = aov( dat$mfARI ~ dat$Maniobra, data = dat )
summary(fm)
boxplot(dat$mfARI ~ dat$Maniobra,
main="Boxplot comparing Mileage of Four Brands of Tyre",
col= rainbow(3),
horizontal = TRUE)
boxplot(dat$mfARI ~ dat$Maniobra,
main="Boxplot comparing Mileage of Four Brands of Tyre",
col= rainbow(3),
horizontal = TRUE)
boxplot(dat$mfARI ~ dat$Maniobra,
main="Comparacion de Posiciones mfARI",
col= rainbow(3),
horizontal = TRUE)
ggplot(dat, aes(reorder(Maniobra,mfARI),mfARI,fill=Maniobra))+
# ggplot(tyre, aes(Brands,Mileage,fill=Brands))+ # if you want to leave them alphabetic
geom_jitter(colour = "dark gray",width=.1) +
stat_boxplot(geom ='errorbar',width = 0.4) +
geom_boxplot()+
labs(title="Boxplot, dotplot and SEM plot of mileage for four brands of tyres",
x = "Brands (sorted)",
y = "Mileage (in thousands)",
subtitle ="Gray dots=sample data points, Black dot=outlier, Blue dot=mean, Red=99% confidence interval",
caption = "Data from https://datascienceplus.com/one-way-anova-in-r/") +
guides(fill=FALSE) +
stat_summary(fun.data = "mean_cl_normal", colour = "red", size = 1.5, fun.args = list(conf.int=.99)) +
stat_summary(geom="point", fun.y=mean, color="blue") +
theme_bw()
library(ggplot2)
ggplot(dat, aes(reorder(Maniobra,mfARI),mfARI,fill=Maniobra))+
# ggplot(tyre, aes(Brands,Mileage,fill=Brands))+ # if you want to leave them alphabetic
geom_jitter(colour = "dark gray",width=.1) +
stat_boxplot(geom ='errorbar',width = 0.4) +
geom_boxplot()+
labs(title="Boxplot, dotplot and SEM plot of mileage for four brands of tyres",
x = "Brands (sorted)",
y = "Mileage (in thousands)",
subtitle ="Gray dots=sample data points, Black dot=outlier, Blue dot=mean, Red=99% confidence interval",
caption = "Data from https://datascienceplus.com/one-way-anova-in-r/") +
guides(fill=FALSE) +
stat_summary(fun.data = "mean_cl_normal", colour = "red", size = 1.5, fun.args = list(conf.int=.99)) +
stat_summary(geom="point", fun.y=mean, color="blue") +
theme_bw()
tyres.aov<- aov(mfARI~Maniobra, dat)
class(tyres.aov)
typeof(tyres.aov)
names(tyres.aov)
summary(tyres.aov)
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
setwd("C:/Users/Luis/Documents/DataScience/Tesis/Calculo ARI/v15.9.10/stats")
data <- read.csv('maniobras-stats-v15.9.10.csv', sep=';')
left <- data[data$Hemisferio=="Left",]$mfARI
right <- data[data$Hemisferio=="Right",]$mfARI
mfARI <- rowMeans(data.frame(left, right))
dat = data.frame("Maniobra" = data[data$Hemisferio=="Left",]$Maniobra, "mfARI" = mfARI)
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
ggplot(dat, aes(reorder(Maniobra,mfARI),mfARI,fill=Maniobra))+
# ggplot(tyre, aes(Brands,Mileage,fill=Brands))+ # if you want to leave them alphabetic
geom_jitter(colour = "dark gray",width=.1) +
stat_boxplot(geom ='errorbar',width = 0.4) +
geom_boxplot()+
labs(title="Boxplot, dotplot and SEM plot of mileage for four brands of tyres",
x = "Brands (sorted)",
y = "Mileage (in thousands)",
subtitle ="Gray dots=sample data points, Black dot=outlier, Blue dot=mean, Red=99% confidence interval",
caption = "Data from https://datascienceplus.com/one-way-anova-in-r/") +
guides(fill=FALSE) +
stat_summary(fun.data = "mean_cl_normal", colour = "red", size = 1.5, fun.args = list(conf.int=.99)) +
stat_summary(geom="point", fun.y=mean, color="blue") +
theme_bw()
boxplot(dat$mfARI ~ dat$Maniobra,
main="Comparacion de Posiciones mfARI",
col= rainbow(3),
horizontal = TRUE)
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
tyres.aov<- aov(mfARI~Maniobra, dat)
summary(tyres.aov)
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
TukeyHSD(fm)
ggplot(dat, aes(reorder(Maniobra,mfARI),mfARI,fill=Maniobra))+
# ggplot(tyre, aes(Brands,Mileage,fill=Brands))+ # if you want to leave them alphabetic
geom_jitter(colour = "dark gray",width=.1) +
stat_boxplot(geom ='errorbar',width = 0.4) +
geom_boxplot()+
labs(title="Boxplot, dotplot and SEM plot of mileage for four brands of tyres",
x = "Brands (sorted)",
y = "Mileage (in thousands)",
subtitle ="Gray dots=sample data points, Black dot=outlier, Blue dot=mean, Red=99% confidence interval",
caption = "Data from https://datascienceplus.com/one-way-anova-in-r/") +
guides(fill=FALSE) +
stat_summary(fun.data = "mean_cl_normal", colour = "red", size = 1.5, fun.args = list(conf.int=.99)) +
stat_summary(geom="point", fun.y=mean, color="blue") +
theme_bw()
posthocPairwiseT(tyres.aov,p.adjust.method = "none")
library(posthocPairwiseT)
library(lsr)
install.packages(âlsrâ)
install.packages("lsr")
library(lsr)
posthocPairwiseT(tyres.aov,p.adjust.method = "none")
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
TukeyHSD(tyres.aov, conf.level = 0.95)
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
posthocPairwiseT(tyres.aov)
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "holm")
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "bonferroni")
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "bonferroni")
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
boxplot(dat$mfARI ~ dat$Maniobra,
main="Comparacion de Posiciones mfARI",
col= rainbow(3),
horizontal = TRUE)
par(oma=c(0,5,0,0)) # adjust the margins because the factor names are long
plot(TukeyHSD(tyres.aov, conf.level = 0.99),las=1, col = "red")
par(oma=c(0,0,0,0)) # put the margins back
par(oma=c(0,5,0,0)) # adjust the margins because the factor names are long
plot(TukeyHSD(tyres.aov, conf.level = 0.99),las=1, col = "red")
par(oma=c(0,0,0,0)) # put the margins back
par(oma=c(0,5,0,0)) # adjust the margins because the factor names are long
plot(pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none"),las=1, col = "red")
par(oma=c(0,0,0,0)) # put the margins back
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
library(dplyr)
library(FSA)
install.packages("FSA")
library(FSA)
library(car)
model = lm(mfARI ~ Maniobra,
data=dat)
Anova(model, type="II")
Anova(model, type="III")
anova(model)
summary(model)
hist(residuals(model),
col="darkgray")
library(multcomp)
install.packages("multcomp")
library(multcomp)
mc = glht(model,
mcp(Location = "Tukey"))
mcs = summary(mc, test=adjusted("single-step"))
mcs
mc = glht(model,
mcp(Maniobra = "Tukey"))
mcs = summary(mc, test=adjusted("single-step"))
mcs
summary(tyres.aov)
pairwise.t.test(dat$mfARI,dat$Maniobra,p.adjust.method = "none")
summary(model)
boxplot(mfARI ~ Maniobra,
data = dat,
ylab="aam / height",
xlab="Location")
boxplot(dat$mfARI ~ dat$Maniobra,
main="Comparacion de Posiciones mfARI",
col= rainbow(3),
horizontal = TRUE)
ks.test(left, "pnorm")
shapiro.test(left)
t.test(left, right, alternative = "two.sided")
wilcox.test(left, right, alternative = "two.sided")
t.test(left, right, alternative = "two.sided")
ks.test(left, "pnorm")
ks.test(right, "pnorm")
shapiro.test(left)
setwd("C:/Users/Luis/Documents/DataScience/Tesis/Calculo ARI/v15.9.10/stats")
data <- read.csv('maniobras-stats-v15.9.10.csv', sep=';')
left <- data[data$Hemisferio=="Left",]$mfARI
right <- data[data$Hemisferio=="Right",]$mfARI
ks.test(left, "pnorm")
shapiro.test(left)
shapiro.test(right)
ks.test(right, "pnorm")
ks.test(left, "pnorm")
wilcox.test(left, right, alternative = "two.sided")
t.test(left, right, alternative = "two.sided")
ks.test(left, "pnorm")#no normal
ks.test(right, "pnorm")#no normal
wilcox.test(left, right, alternative = "two.sided")
hist(left)
hist(right)
shapiro.test(left)#normal
hist(left)
shapiro.test(right)#normal
hist(right)
